install.packages("gridExtra")
str(mtcars)
mtcars
mtcars[,c("mpg","wt")]
library(ggplot2)
ggplot(mtcars,
aes(y=mpg)) +
geom_boxplot()
ggplot(mtcars,
aes(x="",y=mpg)) +
geom_violin()
ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point()
library(gapminder)
gapminder
library(gapminder)
install.packages("gapminder")
library(gapminder)
version
R.version.string
installr: install.packages("installr")
install.packages("installr")
library(installr)
updateR()
updateR()
library(gapminder)
gapminder
# Box Plot
ggplot(mtcars,
aes(y=mpg)) +
geom_boxplot()
# Violin Plot
ggplot(mtcars,
aes(x="",y=mpg)) +
geom_violin()
# Scatter Plot
ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point()
# Data mtcars
str(mtcars)
mtcars
mtcars[,c("mpg","wt")]
# -------------------- #
# Load Package ggplot2 #
# -------------------- #
library(ggplot2)
# Box Plot
ggplot(mtcars,
aes(y=mpg)) +
geom_boxplot()
# Violin Plot
ggplot(mtcars,
aes(x="",y=mpg)) +
geom_violin()
# Scatter Plot
ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point()
library(dplyr)
gap1992 <- gapminder %>%
filter(year == 1982)
gap1992
# ----------------------- #
library(gapminder)
gapminder
library(dplyr)
gap1992 <- gapminder %>%
filter(year == 1982)
gap1992
install.packages("dplyr")
str(mtcars)
mtcars
mtcars[,c("mpg","wt")]
ggplot(gap1992,
aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = .2,
shape = 21,
fill = "white")
ggplot(gap1992,
aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = .90,
shape = 21,
fill = "white")
ggplot(gap1992,
aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = .90,
shape = 11,
fill = "white")
ggplot(gap1992,
aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = .8,
shape = 21,
fill = "white")+
aes(col = continent,
fill = continent)
ggplot(gap1992,
aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = .8,
shape = 21,
fill = "white")+
aes(col = continent,
fill = continent)+
geom_point(alpha = .3,
shape = 21)+
aes(size = pop)
ggplot(gap1992,
aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = .8,
shape = 21,
fill = "white")+
aes(col = continent,
fill = continent)+
geom_point(alpha = .3,
shape = 21)+
aes(size = pop)+
scale_size(guide = FALSE)
ggplot(gap1992,
aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = .8,
shape = 21,
fill = "white")+
aes(col = continent,
fill = continent)+
geom_point(alpha = .3,
shape = 21)+
aes(size = pop)+
scale_size(guide = FALSE)+
labs(title = "Wealth and Expected Longevity\nYear 1992")
ggplot(gap1992,
aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = .8,
shape = 21,
fill = "white")+
aes(col = continent,
fill = continent)+
geom_point(alpha = .3,
shape = 21)+
aes(size = pop)+
scale_size(guide = FALSE)+
labs(title = "Wealth and Expected Longevity\nYear 1992",
subtitle = "Package gapminder, Data gapminder",
x = "GDP per Capita",
y = "Life Expectancy")
View(gap1992)
ggplot(gap1992,
aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = .8,
shape = 21,
fill = "white")+
aes(col = continent,
fill = continent)+
geom_point(alpha = .3,
shape = 21)+
aes(size = pop)+
scale_size(guide = FALSE)+
labs(title = "Wealth and Expected Longevity\nYear 1992",
subtitle = "Package gapminder, Data gapminder",
x = "GDP per Capita",
y = "Life Expectancy",
tag = "Bubble Plot")
ggplot(gap1992,
aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = .8,
shape = 21,
fill = "white")+
aes(col = continent,
fill = continent)+
geom_point(alpha = .3,
shape = 21)+
aes(size = pop)+
scale_size(guide = FALSE)+
labs(title = "Wealth and Expected Longevity\nYear 1992",
subtitle = "Package gapminder, Data gapminder",
x = "GDP per Capita",
y = "Life Expectancy",
tag = "Bubble Plot",
col = "Continent",
fill = "Continent")
ggplot(gap1992,
aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = .8,
shape = 21,
fill = "white")+
aes(col = continent,
fill = continent)+
geom_point(alpha = .3,
shape = 21)+
aes(size = pop)+
scale_size(guide = FALSE)+
labs(title = "Wealth and Expected Longevity\nYear 1992",
subtitle = "Package gapminder, Data gapminder",
x = "GDP per Capita",
y = "Life Expectancy",
tag = "Bubble Plot",
col = "Continent",
fill = "Continent",
caption = "Package ggplot2")
ggplot() + theme_void()
E2 <- ggplot() +
labs(title    = "Title",
subtitle = "Subtitle",
caption  = "Caption")
E2
View(E2)
E3 <- ggplot() +
labs(title    = "Add X-Axis and Y-Axis",
subtitle = "Subtitle",
caption  = "Caption",
x        = "X-Axis Label",
y        = "Y-Axis Label")
E3
E4 <- ggplot() +
labs(title    = "Change Text Color",
subtitle = "Subtitle",
caption  = "Caption",
x        = "X-Axis Label",
y        = "Y-Axis Label")+
theme(text = element_text(color="blue"))
E4
m1 <- ggplot(mtcars, aes(wt, mpg)) +
geom_point(color = "firebrick") +
theme(plot.caption = element_text(size=25,color="salmon"))+
labs(title    = "Fuel Economy and Weight",
subtitle = "32 Automobiles, 1973Â–74 Models",
x        = "Weight (1,000 ibs)",
y        = "Miles/Gallon",
caption  = "Default")
m1
View(gap1992)
m2 <- m1 +
theme(plot.caption     = element_text(size=25,color="white"),
plot.background  = element_rect(fill = "orange"),
panel.background = element_rect(fill = "lightskyblue"),
plot.margin      = unit(c(1, 5, 1, 5), "cm"))+
labs(caption  = "plot.margin = unit(c(1, 5, 1, 5)")
m2
m2 <- m1 +
theme(plot.caption     = element_text(size=25,color="white"),
plot.background  = element_rect(fill = "orange"),
panel.background = element_rect(fill = "lightskyblue"),
plot.margin      = unit(c(1, 5, 1, 5), "cm"))+
labs(caption  = "plot.margin = unit(c(1, 5, 1, 1)")
m2
m2 <- m1 +
theme(plot.caption     = element_text(size=25,color="white"),
plot.background  = element_rect(fill = "orange"),
panel.background = element_rect(fill = "lightskyblue"),
plot.margin      = unit(c(1, 10, 1, 5), "cm"))+
labs(caption  = "plot.margin = unit(c(1, 5, 1, 5)")
m2
m2 <- m1 +
theme(plot.caption     = element_text(size=25,color="white"),
plot.background  = element_rect(fill = "orange"),
panel.background = element_rect(fill = "lightskyblue"),
plot.margin      = unit(c(1, 7, 1, 5), "cm"))+
labs(caption  = "plot.margin = unit(c(1, 5, 1, 5)")
m2
m2 <- m1 +
theme(plot.caption     = element_text(size=25,color="white"),
plot.background  = element_rect(fill = "orange"),
panel.background = element_rect(fill = "lightskyblue"),
plot.margin      = unit(c(1, 7, 1, 7), "cm"))+
labs(caption  = "plot.margin = unit(c(1, 5, 1, 5)")
m2
m2 <- m1 +
theme(plot.caption     = element_text(size=25,color="white"),
plot.background  = element_rect(fill = "orange"),
panel.background = element_rect(fill = "lightskyblue"),
plot.margin      = unit(c(2, 5, 2, 5), "cm"))+
labs(caption  = "plot.margin = unit(c(1, 5, 1, 5)")
m2
m2 <- m1 +
theme(plot.caption     = element_text(size=25,color="white"),
plot.background  = element_rect(fill = "orange"),
panel.background = element_rect(fill = "lightskyblue"),
plot.margin      = unit(c(2, 5, 1, 5), "cm"))+
labs(caption  = "plot.margin = unit(c(1, 5, 1, 5)")
m2
m2 <- m1 +
theme(plot.caption     = element_text(size=25,color="white"),
plot.background  = element_rect(fill = "orange"),
panel.background = element_rect(fill = "lightskyblue"),
plot.margin      = unit(c(1, 5, 1, 5), "cm"))+
labs(caption  = "plot.margin = unit(c(1, 5, 1, 5)")
m2
m3 <- m1 +
theme(plot.background  = element_rect(fill = "yellow"),
panel.background = element_rect(fill = "lightskyblue"),
plot.margin      = unit(c(5, 1, 5, 1), "cm"))+
labs(caption  = "plot.margin = unit(c(5, 1, 5, 1)")
m3
m2 <- m1 +
theme(plot.caption     = element_text(size=25,color="white"),
plot.background  = element_rect(fill = "orange"),
panel.background = element_rect(fill = "lightskyblue"),
plot.margin      = unit(c(1, 9, 1, 9), "cm"))+
labs(caption  = "plot.margin = unit(c(1, 5, 1, 5)")
m2
m2 <- m1 +
theme(plot.caption     = element_text(size=25,color="white"),
plot.background  = element_rect(fill = "orange"),
panel.background = element_rect(fill = "lightskyblue"),
plot.margin      = unit(c(4, 9, 4, 9), "cm"))+
labs(caption  = "plot.margin = unit(c(1, 5, 1, 5)")
m2
setwd("C:/Users/AiQian/Desktop")
#load libraries require
library(readxl) # to read excel file
library(dplyr) # for data management
library(ggplot2) # to plot graph, fro elegant data visualization
library(ggpubr)# to plot graph, fro elegant data visualization
library(gridExtra) # provides a number of user-level functions to work with "grid" graphics, notably to arrange multiple grid-based plots on a page, and draw tables
setwd("C:/Users/AiQian/Desktop")
#load libraries require
library(readxl) # to read excel file
library(dplyr) # for data management
library(ggplot2) # to plot graph, fro elegant data visualization
library(ggpubr)# to plot graph, fro elegant data visualization
library(gridExtra) # provides a number of user-level functions to work with "grid" graphics, notably to arrange multiple grid-based plots on a page, and draw tables
my_data <- read_excel("C:/Users/AiQian/Desktop/abcd1234_graph.xlsx", sheet = "Sheet1", range = "A1:J5")
View(my_data)
dvList <- names(my_data)[2:10]
PP <- list()
cap <- colnames(my_data)[c(2:10)]
for(i in 1:length(cap)){
currP = cap[i]
# create a temporary dataframe #
tmpD <- data.frame(my_data[,1:1], my_data[,(i+1)], check.names=F)
colnames(tmpD)[2] = "cap"
rr = range(tmpD$cap)
P = ggplot(tmpD, aes(x=Test, y=cap)) + geom_point(size = 2.0, colour = "red") + ggtitle(currP) + stat_summary(fun.y = mean, geom="line", group=2, color= "blue", size = 1.0) +ylim(2, 5) + geom_text(aes(label = paste("(", cap, ")")), nudge_y = -0.25)
tmpD
tmpD <- data.frame(my_data[,1:1], my_data[,(i+1)], check.names=F)
tmpD
for(i in 1:length(cap)){
currP = cap[i]
# create a temporary dataframe #
tmpD <- data.frame(my_data[,1:1], my_data[,(i+1)], check.names=F)
colnames(tmpD)[2] = "cap"
rr = range(tmpD$cap)
# plotting the graph, can play with colour etc. to make the graph prettier
P = ggplot(tmpD, aes(x=Test, y=cap)) + geom_point(size = 2.0, colour = "red") + ggtitle(currP) + stat_summary(fun.y = mean, geom="line", group=2, color= "blue", size = 1.0) +ylim(2, 5) + geom_text(aes(label = paste("(", cap, ")")), nudge_y = -0.25)
PP[[i]] <- P
}
P
for(i in 1:length(cap)){
currP = cap[i]
# create a temporary dataframe #
tmpD <- data.frame(my_data[,1:1], my_data[,(i+1)], check.names=F)
colnames(tmpD)[2] = "cap"
rr = range(tmpD$cap)
# plotting the graph, can play with colour etc. to make the graph prettier
P = ggplot(tmpD, aes(x=Test, y=cap)) + geom_point(size = 2.0, colour = "red") + ggtitle(currP) + stat_summary(fun.y = mean, geom="line", group=2, color= "blue", size = 1.0) +ylim(2, 5) + geom_text(aes(label = paste("(", cap, ")")), nudge_y = -0.25)
PP[[i]] <- P
}
P
# this R file is used to try on CHAID library
# install.packages("CHAID", repos="http://R-Forge.R-project.org")
library('CHAID')
library('partykit')
library('grid')
library('libcoin')
library(readxl)
helpme <- read_excel("helpme.xlsx", sheet = "Sheet1", range = "A1:G300")
show (helpme)
attach(helpme)
setwd("C:/Users/AiQian/Desktop/chaid-local-repo")
helpme <- read_excel("helpme.xlsx", sheet = "Sheet1", range = "A1:G300")
show (helpme)
attach(helpme)
att <- factor(Attrition)
ag <- factor(Age)
el <- factor(EducationLevel)
gndr <- factor(Gender)
pr <- factor(PerformanceRating)
pay <- factor(PaymentType)
marstat <- factor(MaritalStatus)
ctrl <- chaid_control(minsplit = 2, minbucket = 2, alpha2 = .05, alpha4 = .05)
chaidmar <- chaid(marstat ~ pr + el + gndr +pay + att + ag, data = helpme, control = ctrl)
print(chaidmar)
plot(chaidmar)
plot(chaidmar, type = 'simple')
library(gmodels)
trainToBishan <- predict(chaidmar, helpme)
CrossTable(helpme$MaritalStatus, trainToBishan,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
library('CHAID')
library('partykit')
library('grid')
library('libcoin')
library(readxl)
show (helpme)
attach(helpme)
att <- factor(Attrition)
ag <- factor(Age)
el <- factor(EducationLevel)
gndr <- factor(Gender)
pr <- factor(PerformanceRating)
pay <- factor(PaymentType)
marstat <- factor(MaritalStatus)
ctrl <- chaid_control(minsplit = 2, minbucket = 2, alpha2 = .05, alpha4 = .05)
chaidmar <- chaid(marstat ~ pr + el + gndr +pay + att + ag, data = helpme, control = ctrl)
print(chaidmar)
plot(chaidmar)
plot(chaidmar, type = 'simple')
# evaluation of the model
library(gmodels)
trainToBishan <- predict(chaidmar, helpme)
CrossTable(helpme$MaritalStatus, trainToBishan,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
